{"version":3,"sources":["components/Sidebar.js","components/Editor.js","firebase.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","react_default","a","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","deleteNode","newNote","Editor","_ref","tempNoteText","setTempNoteText","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","notesCollection","collection","App","setNotes","_React$useState3","_React$useState4","currentNoteId","_React$useState5","_React$useState6","find","sortedNotes","sort","b","updatedAt","createNewNote","_createNewNote","apply","this","arguments","asyncToGenerator","_regeneratorRuntime","mark","_callee","newNoteRef","wrap","_context","prev","next","createdAt","Date","now","addDoc","sent","stop","_updateNote","_callee2","text","docRef","_context2","doc","setDoc","merge","_deleteNote","_callee3","noteId","_context3","deleteDoc","useEffect","onSnapshot","snapshot","notesArr","docs","objectSpread","data","timeoutId","setTimeout","_x","updateNote","clearTimeout","length","react_split_es","sizes","direction","_x2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d58f7d0d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Sidebar(props) {\n    /**\n     * Challenge: Try to figure out a way to display only the\n     * first line of note.body as the note summary in the\n     * sidebar.\n     *\n     * Hint 1: note.body has \"invisible\" newline characters\n     * in the text every time there's a new line shown. E.g.\n     * the text in Note 1 is:\n     * \"# Note summary\\n\\nBeginning of the note\"\n     *\n     * Hint 2: See if you can split the string into an array\n     * using the \"\\n\" newline character as the divider\n     */\n    const noteElements = props.notes.map((note, index) => (\n        <div key={note.id}>\n            <div\n                className={`title ${\n                    note.id === props.currentNote.id ? \"selected-note\" : \"\"\n                }`}\n                onClick={() => props.setCurrentNoteId(note.id)}\n            >\n                <h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n                <button\n                    className=\"delete-btn\"\n                    onClick={() => props.deleteNode(note.id)}\n                    // Your onClick event handler here\n                >\n                    <i className=\"gg-trash trash-icon\"></i>\n                </button>\n            </div>\n        </div>\n    ))\n\n    return (\n        <section className=\"pane sidebar\">\n            <div className=\"sidebar--header\">\n                <h3>Notes</h3>\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\n            </div>\n            {noteElements}\n        </section>\n    )\n}\n\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\"\n\nexport default function Editor({ tempNoteText, setTempNoteText }) {\n    const [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n    const converter = new Showdown.Converter({\n        tables: true,\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tasklists: true,\n    })  \n\n    return (\n        <section className=\"pane editor\">\n            <ReactMde\n                value={tempNoteText}\n                onChange={setTempNoteText}\n                selectedTab={selectedTab}\n                onTabChange={setSelectedTab}\n                generateMarkdownPreview={(markdown) =>\n                    Promise.resolve(converter.makeHtml(markdown))\n                }\n                minEditorHeight={80}\n                heightUnits=\"vh\"\n            />\n        </section>\n    )\n}\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {getFirestore, collection} from \"firebase/firestore\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCXZMROhs7OWLs0Vej9bP1jCjLwyY6TxdI\",\n    authDomain: \"react-notes-2c20f.firebaseapp.com\",\n    projectId: \"react-notes-2c20f\",\n    storageBucket: \"react-notes-2c20f.appspot.com\",\n    messagingSenderId: \"882308535178\",\n    appId: \"1:882308535178:web:41baa9ab3ad90e0d45ae73\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app)\nexport const notesCollection = collection(db, \"notes\")","import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Split from \"react-split\"\nimport {notesCollection, db} from \"./firebase\";\nimport {onSnapshot,\n  addDoc,\n  doc,\n  deleteDoc,\n  setDoc}\n  from \"firebase/firestore\"\n\nexport default function App() {\n\n  const [notes, setNotes] = React.useState([])\n  const [currentNoteId, setCurrentNoteId] = React.useState(\"\")\n  const [tempNoteText, setTempNoteText] = React.useState(\"\")\n\n  const currentNote =\n      notes.find(note => note.id === currentNoteId)\n      || notes[0]\n\n  const sortedNotes = notes.sort((a,b) => {\n    return b.updatedAt - a.updatedAt\n  })\n\n  React.useEffect(()=>{\n    const unsubscribe = onSnapshot(notesCollection,function (snapshot){\n      const notesArr = snapshot.docs.map(doc => ({\n        ...doc.data(),\n            id : doc.id\n        }))\n      setNotes(notesArr);\n    })\n    return unsubscribe\n  },[])\n\n  React.useEffect(() => {\n    if(!currentNoteId){\n      setCurrentNoteId(notes[0] && notes[0].id)\n    }\n  },[notes])\n\n  React.useEffect(() => {\n    if (currentNote) {\n      setTempNoteText(currentNote.body)\n    }\n  }, [currentNote])\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (tempNoteText !== currentNote.body) {\n        updateNote(tempNoteText)\n      }\n    }, 500)\n    return () => clearTimeout(timeoutId)\n  }, [tempNoteText])\n\n  async function createNewNote() {\n    const newNote = {\n      body: \"# Type your markdown note's title here\",\n      createdAt : Date.now(),\n      updatedAt : Date.now()\n    }\n    const newNoteRef = await addDoc(notesCollection,newNote)\n    setCurrentNoteId(newNoteRef.id)\n  }\n\n  async function updateNote(text) {\n    const docRef = doc(db,\"notes\",currentNoteId)\n    await setDoc(docRef, {body : text, updatedAt : Date.now()}, {merge: true})\n  }\n\n  async function deleteNote(noteId) {\n    const docRef = doc(db,\"notes\",noteId)\n    await deleteDoc(docRef)\n  }\n\n  return (\n      <main>\n        {\n          notes.length > 0\n              ?\n              <Split\n                  sizes={[30, 70]}\n                  direction=\"horizontal\"\n                  className=\"split\"\n              >\n                <Sidebar\n                    notes={sortedNotes}\n                    currentNote={currentNote}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNode={deleteNote}\n                />\n                <Editor\n                    tempNoteText={tempNoteText}\n                    setTempNoteText={setTempNoteText}\n                />\n              </Split>\n              :\n              <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button\n                    className=\"first-note\"\n                    onClick={createNewNote}\n                >\n                  Create one now\n                </button>\n              </div>\n\n        }\n      </main>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"../src/style.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}